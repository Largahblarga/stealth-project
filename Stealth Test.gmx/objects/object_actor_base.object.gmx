<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_actor_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Displays vision cone / radius for testing, debug purposes
lineOfSight = instance_create( x, y, object_debug_visionCheck );

//Currently randomizes actor color at spawn.
//TODO: Change this once more design is done.
image_index = irandom( image_number );


//Sets variables, default values
aimDirection = direction;
image_angle_previous = image_angle; //For turn algos
hp = 3; //Default 3 HP
thingsSeen = ds_list_create(); //Keeps track of things it sees
thingsKnown = ds_list_create(); //And of things it is aware of

//Sets constants
turnSpeed = .2;
visionCone = 90; //90 degree vision cone
walkSpeed = 4 * tileLength / room_speed; //Thus expressing speed in tiles per second
runSpeed = 8 * tileLength / room_speed;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Remove if killed
//TODO: Bodies?
if (hp == 0) {
    with (lineOfSight) {
        instance_destroy();
    }
    instance_destroy();
}

//Will turn by a percentage of the difference (currently 8%)
image_angle_previous = image_angle;
if (difference != 0) {
    image_angle += script_motion_turnTowardsDirection( difference, turnSpeed );
}

//Everything it saw this turn will be 'remembered'
for (var temp = 0; temp &lt; ds_list_size(thingsSeen); temp++) {
    var check = ds_list_find_value(thingsSeen, temp);
    if (ds_list_find_index(thingsKnown, check) == -1) {
        ds_list_add(thingsKnown, check);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Workaround to control behavior using animations, instead of the reverse.
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>aimDirection = direction;
difference = aimDirection - image_angle;

//Currently just snaps orientation.
with(lineOfSight) {
    image_angle = other.image_angle;
    direction = other.aimDirection;
    x = other.x;
    y = other.y;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Checks what actors this actor can see
//Except from the 'perspective' of the other actors
//LESSON LEARNED: self == -1, is only a TEMPORARY thing. USE self.id!
with ( object_actor_base ) {
    if (id != other.id &amp;&amp; script_canSeeUnobstructed(other.id, id) &amp;&amp; ds_list_find_index(other.thingsSeen, id) == -1) {
        ds_list_add( other.thingsSeen, id);
    }
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_thing_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += abs( speed * cos( degtorad( other.direction ) ) ) * cos( degtorad( direction ) ) * -1;
y -= abs( speed * sin( degtorad( other.direction ) ) ) * sin( degtorad( direction ) ) * -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = point_direction(x, y, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);

for ( var temp = 0; temp &lt; ds_list_size( thingsSeen ); temp++ ) {
    with ( /*ds_list_read( thingsSeen, x )*/ ds_list_find_value( thingsSeen, temp ) ) {
        //script_guard_reactTo( other, self );
        draw_arrow(other.x,other.y,x,y,50);
        
    }
}
//TODO: MOVE THIS LINE INTO END STEP ONCE AI CAN BE TRUSTED
ds_list_clear(thingsSeen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
